{% import "../macros.njk" as m -%}
{% set catalog = (readFile('../release-catalog.json') | fromJson) -%}
{% set service_def = catalog.services.whisper -%}
# ═════════════════════════════════════════════════════════════════════════════
# 🎤 {{ service_def.name }} v{{ service_def.version }}
# Release: {{ catalog.release.version }}
# {{ service_def.notes }}
# ═════════════════════════════════════════════════════════════════════════════

[Unit]
Description={{ infrastructure.services.whisper.description }}
After=network-online.target {{ infrastructure.network.name }}.network.service
Requires={{ infrastructure.network.name }}.network.service

[Container]
Image={{ service_def.image }}
AutoUpdate=registry
ContainerName={{ infrastructure.services.whisper.container_name }}

# ═════════════════════════════════════════════════════════════════════════════
# 🌐 NETWORK
# ═════════════════════════════════════════════════════════════════════════════
Network={{ infrastructure.network.name }}.network

# ═════════════════════════════════════════════════════════════════════════════
# 📍 PUBLISHED PORT (for OpenWebUI to access)
# ═════════════════════════════════════════════════════════════════════════════
{{ m.publishPort(infrastructure.services.whisper) }}

# ═════════════════════════════════════════════════════════════════════════════
# 💾 VOLUMES
# ═════════════════════════════════════════════════════════════════════════════

# Whisper model cache - shared with host for CLI usage
Volume={{ whisper.cache_dir }}:/root/.cache/huggingface:Z

# ═════════════════════════════════════════════════════════════════════════════
# 🎮 GPU ACCESS (AMD Vulkan)
# ═════════════════════════════════════════════════════════════════════════════
{{ m.amdGPU() }}

# ═════════════════════════════════════════════════════════════════════════════
# 🌍 ENVIRONMENT
# ═════════════════════════════════════════════════════════════════════════════

# Whisper model configuration
Environment=WHISPER_MODEL={{ whisper.model }}
{% if whisper.language -%}
Environment=WHISPER_LANGUAGE={{ whisper.language }}
{% endif -%}
Environment=WHISPER_BEAM_SIZE={{ whisper.beam_size }}
Environment=WHISPER_COMPUTE_TYPE={{ whisper.compute_type }}

# Device configuration (auto detects Vulkan)
Environment=WHISPER_DEVICE={{ whisper.device }}

# Cache location
Environment=HF_HOME=/root/.cache/huggingface
Environment=TRANSFORMERS_CACHE=/root/.cache/huggingface

# ═════════════════════════════════════════════════════════════════════════════
# 🔧 HEALTH CHECK
# ═════════════════════════════════════════════════════════════════════════════

# Primary health check - service responsiveness
{{ m.healthCheckWget(infrastructure.services.whisper.port, "/health") | replace("30s", "60s") }}

# ═════════════════════════════════════════════════════════════════════════════
# 🚀 SERVICE
# ═════════════════════════════════════════════════════════════════════════════
{{ m.serviceSection(timeout=900) }}

# Startup verification with model checking
ExecStartPost=/bin/sh -c '\
  echo "Whisper: Waiting for service to be ready..."; \
  for i in $(seq 1 60); do \
    if wget --no-verbose --tries=1 --spider --timeout=2 http://localhost:{{ infrastructure.services.whisper.port }}/health 2>/dev/null; then \
      echo "Whisper: ✓ Service health check passed"; \
      if wget --no-verbose --tries=1 -O- --timeout=5 http://localhost:{{ infrastructure.services.whisper.port }}/v1/models 2>/dev/null | grep -q "whisper"; then \
        echo "Whisper: ✓ Model API available (model: {{ whisper.model }})"; \
        echo "Whisper: Service ready at http://localhost:{{ infrastructure.services.whisper.port }}"; \
        exit 0; \
      else \
        echo "Whisper: ⚠ Model not yet loaded (will load on first request)"; \
      fi; \
    fi; \
    sleep 1; \
  done; \
  echo "Whisper: ⚠ Service started but verification incomplete (will retry on first use)"; \
  exit 0'

# Log startup status
ExecStartPre=/usr/bin/echo "Whisper: Starting STT service with model={{ whisper.model }} language={{ whisper.language }}"

[Install]
# No WantedBy - dependencies via After/Requires
