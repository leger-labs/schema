{% import "../macros.njk" as m -%}
{% set catalog = (readFile('../release-catalog.json') | fromJson) -%}
{% set service_def = catalog.services.jupyter -%}
# ═════════════════════════════════════════════════════════════════════════════
# 🐍 {{ service_def.name }} v{{ service_def.version }}
# Release: {{ catalog.release.version }}
# {{ service_def.notes }}
# ═════════════════════════════════════════════════════════════════════════════

[Unit]
Description={{ infrastructure.services.jupyter.description }}
After=network-online.target {{ infrastructure.network.name }}.network.service
{% for dep in infrastructure.services.jupyter.requires -%}
After={{ dep }}.service
{% endfor -%}
Requires={{ infrastructure.network.name }}.network.service
{% for dep in infrastructure.services.jupyter.requires -%}
Wants={{ dep }}.service
{% endfor %}

[Container]
Image={{ service_def.image }}
AutoUpdate=registry
ContainerName={{ infrastructure.services.jupyter.container_name }}

# ═════════════════════════════════════════════════════════════════════════════
# 🌐 NETWORK
# ═════════════════════════════════════════════════════════════════════════════
Network={{ infrastructure.network.name }}.network

# ═════════════════════════════════════════════════════════════════════════════
# 📍 PUBLISHED PORT (for OpenWebUI and Caddy to access)
# ═════════════════════════════════════════════════════════════════════════════
{{ m.publishPort(infrastructure.services.jupyter) }}

# ═════════════════════════════════════════════════════════════════════════════
# 💾 VOLUME (Minimal - workspace only)
# ═════════════════════════════════════════════════════════════════════════════
{{ m.volumeMount(infrastructure.services.jupyter.volume, "/home/jovyan/blueprint-workspace") }}

# ═════════════════════════════════════════════════════════════════════════════
# 🌍 ENVIRONMENT - Auto-generated from configuration
# ═════════════════════════════════════════════════════════════════════════════

# JupyterLab configuration
Environment=JUPYTER_ENABLE_LAB=yes
Environment=NB_USER=jovyan
Environment=CHOWN_HOME=yes
Environment=CHOWN_HOME_OPTS=-R

# Notebook Intelligence Configuration (LiteLLM integration)
Environment=LITELLM_API_BASE=http://{{ infrastructure.services.litellm.hostname }}:{{ infrastructure.services.litellm.port }}
Environment=LITELLM_API_KEY=${LITELLM_MASTER_KEY}

# Optional: Disable notebook execute tool by default (security)
Environment=NBI_NOTEBOOK_EXECUTE_TOOL=disabled

# ═════════════════════════════════════════════════════════════════════════════
# 🚀 EXECUTION
# ═════════════════════════════════════════════════════════════════════════════

# Start JupyterLab with OpenWebUI-compatible settings
Exec=start-notebook.py \
  --NotebookApp.token='' \
  --NotebookApp.password='' \
  --NotebookApp.disable_check_xsrf=True \
  --NotebookApp.allow_origin='*' \
  --NotebookApp.allow_remote_access=True \
  --NotebookApp.notebook_dir=/home/jovyan/blueprint-workspace

# ═════════════════════════════════════════════════════════════════════════════
# 🔧 HEALTH CHECK
# ═════════════════════════════════════════════════════════════════════════════
{{ m.healthCheck(infrastructure.services.jupyter.port, "/api") }}

# ═════════════════════════════════════════════════════════════════════════════
# 🚀 SERVICE
# ═════════════════════════════════════════════════════════════════════════════
{{ m.serviceSection(timeout=180, restart="always") }}

# Build custom image before starting (only if not exists or changed)
ExecStartPre=-/usr/bin/podman build \
  -t localhost/blueprint-jupyter:latest \
  -f %h/.config/containers/systemd/jupyter/Dockerfile \
  %h/.config/containers/systemd/jupyter

# Log startup info
ExecStartPost=/usr/bin/sh -c '\
  echo "Jupyter Lab: Started successfully"; \
  echo "Jupyter Lab: Internal URL: http://{{ infrastructure.services.jupyter.hostname }}:{{ infrastructure.services.jupyter.port }}"; \
  echo "Jupyter Lab: External URL: https://{{ infrastructure.services.jupyter.external_subdomain }}.{{ tailscale.full_hostname }}"; \
  echo "Jupyter Lab: OpenWebUI will connect to: http://{{ infrastructure.services.jupyter.hostname }}:{{ infrastructure.services.jupyter.port }}"; \
  echo "Jupyter Lab: Workspace: /home/jovyan/blueprint-workspace"; \
  echo "Jupyter Lab: AI Code Completion: Enabled (notebook-intelligence + LiteLLM)"'

[Install]
WantedBy=default.target

# ═════════════════════════════════════════════════════════════════════════════
# 📝 ARCHITECTURE NOTES
# ═════════════════════════════════════════════════════════════════════════════
#
# CUSTOM IMAGE:
#   - Built from scipy-notebook (scientific Python stack)
#   - Adds nb_conda_kernels (multi-environment support)
#   - Adds notebook-intelligence (AI code completion via LiteLLM)
#
# OPENWEBUI INTEGRATION:
#   - Code Interpreter: AI executes code in persistent kernel
#   - Code Execution: User clicks "Run" button for generated code
#
# SECURITY:
#   - No authentication (Tailscale security boundary)
#   - NBI notebook execute tool disabled by default
#   - Only blueprint-workspace volume mounted (minimal access)
#
# DEPENDENCIES:
#   - After litellm.service (needs LiteLLM for AI features)
# ═════════════════════════════════════════════════════════════════════════════
